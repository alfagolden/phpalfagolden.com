<?php
declare(strict_types=1);
header('Content-Type: application/json; charset=UTF-8');
const DOCS_DIR=__DIR__;const TEMPLATE_NAME='qt.docx';const EXPECTED_TOKEN='ALFA-SEC-2025';
function respond(int $code,array $data){http_response_code($code);echo json_encode($data,JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);exit;}
function fetch_bytes(string $url):string{$ch=curl_init($url);curl_setopt_array($ch,[CURLOPT_RETURNTRANSFER=>true,CURLOPT_FOLLOWLOCATION=>true,CURLOPT_TIMEOUT=>30,CURLOPT_USERAGENT=>'AlfaDocxBot/1.0']);$data=curl_exec($ch);$code=curl_getinfo($ch,CURLINFO_RESPONSE_CODE);curl_close($ch);if($data===false||$code<200||$code>=300)throw new RuntimeException("Download failed (HTTP $code) for URL: $url");return(string)$data;}
function list_zip_parts(ZipArchive $zip,string $pattern):array{$parts=[];for($i=0;$i<$zip->numFiles;$i++){$name=$zip->getNameIndex($i);if(preg_match($pattern,$name))$parts[]=$name;}return$parts;}
function normalize_target_path(string $partPath,string $target):string{$partDir=dirname($partPath);$path=$partDir.'/'.$target;$pathParts=explode('/',$path);$realPathParts=[];foreach($pathParts as $part){if($part==='.'||$part==='')continue;if($part==='..')array_pop($realPathParts);else$realPathParts[]=$part;}return implode('/',$realPathParts);}
function replace_text_in_part(ZipArchive $zip,string $partPath,array $replacements):int{$xmlContent=$zip->getFromName($partPath);if($xmlContent===false)return 0;$placeholders=array_keys($replacements);$values=array_values($replacements);$sanitizedValues=array_map(function($v){return htmlspecialchars($v,ENT_XML1,'UTF-8');},$values);$newXmlContent=str_replace($placeholders,$sanitizedValues,$xmlContent,$count);if($count>0)$zip->addFromString($partPath,$newXmlContent);return$count;}
function replace_images_in_part(ZipArchive $zip,string $partPath,string $newImageBytes,array $newImageDims,array $placeholders,array &$processedPlaceholders):int{$xml=$zip->getFromName($partPath);$relsPath=dirname($partPath).'/_rels/'.basename($partPath).'.rels';$relsXml=$zip->getFromName($relsPath);if($xml===false||$relsXml===false)return 0;$dom=new DOMDocument();if(!@$dom->loadXML($xml))return 0;$relsDom=new DOMDocument();if(!@$relsDom->loadXML($relsXml))return 0;$xp=new DOMXPath($dom);$xp->registerNamespace('wp','http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing');$xp->registerNamespace('a','http://schemas.openxmlformats.org/drawingml/2006/main');$xp->registerNamespace('r','http://schemas.openxmlformats.org/officeDocument/2006/relationships');$relsXp=new DOMXPath($relsDom);$relsXp->registerNamespace('rel','http://schemas.openxmlformats.org/package/2006/relationships');$replacedCount=0;$isModified=false;foreach($xp->query('//wp:docPr')as $docPrNode){$altText=trim($docPrNode->getAttribute('descr'));if($altText==='')$altText=trim($docPrNode->getAttribute('title'));if(in_array($altText,$placeholders,true)&&!isset($processedPlaceholders[$altText])){$drawingNode=$xp->query('ancestor::w:drawing[1]',$docPrNode)->item(0);if(!$drawingNode)continue;$blipNode=$xp->query('.//a:blip',$drawingNode)->item(0);$extentNode=$xp->query('.//wp:extent',$drawingNode)->item(0);if(!$blipNode||!$extentNode)continue;$originalWidthEMU=(int)$extentNode->getAttribute('cx');$newHeightEMU=(int)round($originalWidthEMU*$newImageDims['ratio']);$extentNode->setAttribute('cy',(string)$newHeightEMU);$spPrNode=$xp->query('.//a:spPr/a:xfrm/a:ext',$drawingNode)->item(0);if($spPrNode){$spPrNode->setAttribute('cx',(string)$originalWidthEMU);$spPrNode->setAttribute('cy',(string)$newHeightEMU);}$relationId=$blipNode->getAttributeNS('http://schemas.openxmlformats.org/officeDocument/2006/relationships','embed');if($relationId==='')continue;$relNode=$relsXp->query("//rel:Relationship[@Id='$relationId']")->item(0);if(!$relNode)continue;$imagePathInZip=normalize_target_path($partPath,$relNode->getAttribute('Target'));$zip->addFromString($imagePathInZip,$newImageBytes);$processedPlaceholders[$altText]=true;$replacedCount++;$isModified=true;}}if($isModified)$zip->addFromString($partPath,$dom->saveXML());return$replacedCount;}
try{if(($_SERVER['HTTP_X_AUTH_TOKEN']??'')!==EXPECTED_TOKEN)respond(401,['ok'=>false,'error'=>'UNAUTHORIZED']);$input=json_decode(file_get_contents('php://input'),true)??[];$newName=(string)($input['new_name']??'test_output');$textData=(array)($input['text_replacements']??[]);$imageData=(array)($input['image_replacements']??[]);$imageUrl=(string)($input['image_url']??'');$sanitizedName=preg_replace('/[^A-Za-z0-9_\-]/','',$newName);if($sanitizedName==='')respond(400,['ok'=>false,'error'=>'BAD_NAME']);$templatePath=DOCS_DIR.'/'.TEMPLATE_NAME;$targetPath=DOCS_DIR.'/'.$sanitizedName.'.docx';if(!file_exists($templatePath))respond(404,['ok'=>false,'error'=>'TEMPLATE_NOT_FOUND']);if(!copy($templatePath,$targetPath))respond(500,['ok'=>false,'error'=>'COPY_FAILED']);$zip=new ZipArchive();if($zip->open($targetPath)!==TRUE)throw new RuntimeException('ZIP_OPEN_FAILED');$formattedText=[];foreach($textData as $k=>$v){$formattedText['{{'.$k.'}}']=$v;}$formattedImages=[];foreach($imageData as $v){$formattedImages[]='{{'.$v.'}}';}$totalTextReplaced=0;$totalImagesReplaced=0;$processedPlaceholders=[];$contentParts=list_zip_parts($zip,'/^word\/(document|header[0-9]+|footer[0-9]+)\.xml$/i');$newImageBytes=null;$newImageDims=null;if(!empty($formattedImages)&&!empty($imageUrl)){$newImageBytes=fetch_bytes($imageUrl);$dims=@getimagesizefromstring($newImageBytes);if($dims){$newImageDims=['width'=>$dims[0],'height'=>$dims[1],'ratio'=>$dims[1]/$dims[0]];}}foreach($contentParts as $part){if(!empty($formattedText))$totalTextReplaced+=replace_text_in_part($zip,$part,$formattedText);if($newImageBytes!==null&&$newImageDims!==null){$totalImagesReplaced+=replace_images_in_part($zip,$part,$newImageBytes,$newImageDims,$formattedImages,$processedPlaceholders);}}$zip->close();respond(200,['ok'=>true,'file'=>basename($targetPath),'text_instances_replaced'=>$totalTextReplaced,'image_placeholders_replaced'=>$totalImagesReplaced,]);}catch(Throwable $e){respond(500,['ok'=>false,'error'=>'PROCESSING_ERROR','message'=>$e->getMessage(),'line'=>$e->getLine()]);}
